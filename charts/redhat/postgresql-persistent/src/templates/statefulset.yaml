kind: StatefulSet
apiVersion: apps/v1
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
    image.openshift.io/triggers: |-
      [
        {
          "from": {
            "kind": "ImageStreamTag",
            "name": "postgresql:{{ .Values.image.tag }}"
          },
          "fieldPath": "spec.template.spec.containers[0].image"
        }
      ]
  labels:
    template: postgresql-persistent-template
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Release.Name }}
spec:
  serviceName: {{ .Values.database_service_name }}
  replicas: 1
  selector:
    matchLabels:
      name: {{ .Values.database_service_name }}
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: "*"
      labels:
        name: {{ .Values.database_service_name }}
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: {{ .Values.database_service_name }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ .Values.database_service_name }}
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: {{ .Values.database_service_name }}
        image: "postgresql:{{ .Values.image.tag }}"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
            - /usr/libexec/check-container
            - --live
          initialDelaySeconds: 120
          timeoutSeconds: 10
        name: "postgresql-persistent"
        ports:
        - containerPort: {{ .Values.config.port }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /usr/libexec/check-container
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            memory: {{ .Values.memory_limit }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: {{ .Values.database_service_name }}-data
      volumes:
      - name: {{ .Values.database_service_name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.database_service_name }}
